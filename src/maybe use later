CardInside Interface stuff
    public int[] getUber(){
        int[] u = new int[]{uberAtkATK,uberAtkDEF};
        return u;
    }
    public int[] getAtk(){
        int[] a = new int[]{attackATK, attackDEF};
        return a;
    }
    public int[] getCDef(){
        int[] cd = new int[]{coreDefATK, coreDefATK};
        return cd;
    }
    public int[] getCore(){
        int[] c = new int[]{coreATK, coreDEF};
        return c;
    }
    public int[] getDef(){
        int[] d = new int[]{defenceATK,defenceDEF};
        return d;
    }
public int[] getUber();
public int[] getAtk();
public int[] getCDef();
public int[] getCore();
public int[] getDef();

        public int activeStats(Board pos);
        public String activeType();
public void coreSkill(){
}
public void skill(){
}

Board
public class Board {

//play method stuff
//        while(attackPhase){
//            System.exit(130);
//        }

package Game;

import java.util.ArrayList;

public class CardSlots {
    private final String name;
    private final int openSlots;
    public ArrayList<Card> slot = new ArrayList<>();


    public CardSlots(String Name, int oSlots) {
        name = Name;
        openSlots = oSlots;
    }

    public int[] getStats(int slotNum) {
        int[] test = new int[]{0, 1};
        if (name.equals("uber")) {
            return slot.get(slotNum).getUber();
        }
        if (name.equals("attack")) {
            return slot.get(slotNum).getAtk();

        }
        if (name.equals("core defence")) {
            return slot.get(slotNum).getCDef();

        }
        if (name.equals("core")) {
            return slot.get(slotNum).getCore();

        }
        if (name.equals("defence")) {
            return slot.get(slotNum).getDef();

        }

        return test;
    }

    public int getOpenSlots() {
        return openSlots;
    }

    public String toString() {
        return slot.toString();
    }
}
package Game.Slots;
import Game.Card;

public interface CardSlots {
    int[] getStats(Card in);
    int getAtk(int n);
    int getDef(int n);
    int showOpenSlots();
}

    public void makeBoard() {
        Board.add(new CardSlots("uber", 3));
        Board.add(new CardSlots("attack", 2));
        Board.add(new CardSlots("core defence", 3));
        Board.add(new CardSlots("core", 1));
        Board.add(new CardSlots("defence", 3));
    }

     public static void attackPhase(Player current, Player one, Player two) {
            Scanner input = new Scanner(System.in);
            current = one;
            Player other = opposite(current, one, two);
            String from, to;
            int f, t;
            System.out.println("From which position do you want to attack?");
            from = input.nextLine();
            System.out.println("Which slot?");
            f = input.nextInt();
            System.out.println("Which position do you want to attack?");
            to = input.nextLine();
            System.out.println("Which slot?");
            t = input.nextInt();
            //attack phase
            current.attackOther(other, from, f, to, t);
            switchPlayer(current, one, two);
        }


         public void attackOther(Player c, String from, int pos, String to, int opos){
                if(from.equals("uber")){

                    if(to.equals("uber")){
                        Math.abs(c.playBoard().u.getDef(opos) - b.u.getAtk(pos));
                    }
                    if(to.equals("atk")){
                        Math.abs(c.playBoard().a.getDef(opos) - b.u.getAtk(pos));
                    }
                    if(to.equals("coreDef")){
                        Math.abs(c.playBoard().cd.getDef(opos) - b.u.getAtk(pos));
                    }
                    if(to.equals("core")){
                        Math.abs(c.playBoard().c.getDef(opos) - b.u.getAtk(pos));
                    }
                    if(to.equals("def")){
                        Math.abs(c.playBoard().d.getDef(opos) - b.u.getAtk(pos));
                    }
                }
                if(from.equals("atk")){

                    if(to.equals("uber")){
                        Math.abs(c.playBoard().u.getDef(opos) - b.a.getAtk(pos));
                    }
                    if(to.equals("atk")){
                        Math.abs(c.playBoard().a.getDef(opos) - b.a.getAtk(pos));
                    }
                    if(to.equals("coreDef")){
                        Math.abs(c.playBoard().cd.getDef(opos) - b.a.getAtk(pos));
                    }
                    if(to.equals("core")){
                        Math.abs(c.playBoard().c.getDef(opos) - b.a.getAtk(pos));
                    }
                    if(to.equals("def")){
                        Math.abs(c.playBoard().d.getDef(opos) - b.a.getAtk(pos));
                    }
                }
                if(from.equals("coreDef")){

                    if(to.equals("uber")){
                        Math.abs(c.playBoard().u.getDef(opos) - b.cd.getAtk(pos));
                    }
                    if(to.equals("atk")){
                        Math.abs(c.playBoard().a.getDef(opos) - b.cd.getAtk(pos));
                    }
                    if(to.equals("coreDef")){
                        Math.abs(c.playBoard().cd.getDef(opos) - b.cd.getAtk(pos));
                    }
                    if(to.equals("core")){
                        Math.abs(c.playBoard().c.getDef(opos) - b.cd.getAtk(pos));
                    }
                    if(to.equals("def")){
                        Math.abs(c.playBoard().d.getDef(opos) - b.cd.getAtk(pos));
                    }
                }
                if(from.equals("core")){

                    if(to.equals("uber")){
                        Math.abs(c.playBoard().u.getDef(opos) - b.c.getAtk(pos));
                    }
                    if(to.equals("atk")){
                        Math.abs(c.playBoard().a.getDef(opos) - b.c.getAtk(pos));
                    }
                    if(to.equals("coreDef")){
                        Math.abs(c.playBoard().cd.getDef(opos) - b.c.getAtk(pos));
                    }
                    if(to.equals("core")){
                        Math.abs(c.playBoard().c.getDef(opos) - b.c.getAtk(pos));
                    }
                    if(to.equals("def")){
                        Math.abs(c.playBoard().d.getDef(opos) - b.c.getAtk(pos));
                    }
                }
                if(from.equals("def")){

                    if(to.equals("uber")){
                        Math.abs(c.playBoard().u.getDef(opos) - b.d.getAtk(pos));
                    }
                    if(to.equals("atk")){
                        Math.abs(c.playBoard().a.getDef(opos) - b.d.getAtk(pos));
                    }
                    if(to.equals("coreDef")){
                        Math.abs(c.playBoard().cd.getDef(opos) - b.d.getAtk(pos));
                    }
                    if(to.equals("core")){
                        Math.abs(c.playBoard().c.getDef(opos) - b.d.getAtk(pos));
                    }
                    if(to.equals("def")){
                        Math.abs(c.playBoard().d.getDef(opos) - b.d.getAtk(pos));
                    }
                }
            }


            public Uber u = new Uber();
            public Attack a = new Attack();
            public CoreDef cd = new CoreDef();
            public Core c = new Core();
            public Defense d = new Defense();

            public ArrayList<Card> u = new ArrayList<>();
                public ArrayList<Card> a = new ArrayList<>();
                public ArrayList<Card> cd = new ArrayList<>();
                public ArrayList<Card> c = new ArrayList<>();
                public ArrayList<Card> d = new ArrayList<>();

package Game;

public interface CardInsides {
    int getUberAtk();

    int getUberDef();

    int getAtkAtk();

    int getAtkDef();

    int getCDefAtk();

    int getCDefDef();

    int getCoreAtk();

    int getCoreDef();

    int getDefAtk();

    int getDefDef();

    //board calls
    int[] getUber();

    int[] getAtk();

    int[] getCDef();

    int[] getCore();

    int[] getDef();

    String activeTypeOne();

    String activeTypeTwo();

    //void specialAttack();

 if (act.equals("1")) {

        }
        if (act.equals("2")) {
            //current.getHand();
        }
        if (act.equals("3")) {

        }
        if (act.equals("4")) {

        }
        if (act.equals("5")) {


        }

if (pos.equals("uber")) {

        }
        if (pos.equals("atk")) {

        }
        if (pos.equals("coreDef")) {

        }
        if (pos.equals("core")) {

        }
        if (pos.equals("def")) {

        }

        public interface Position{
                LinkedList<Card> getSlots();
                boolean hasOpenSlots();
                int[] getStats(Card input);
                int getOS();
            }
            public LinkedList<Card> uberSlots(){

                    return u.slots;
                }
                public LinkedList<Card> atkSlots(){

                    return a.slots;
                }
                public LinkedList<Card> cDefSlots(){


                    return cd.slots;
                }
                public LinkedList<Card> cSlots(){

                    return c.slots;
                }
                public LinkedList<Card> defSlots(){

                    return d.slots;
                }

public void addToSlots(int posIndex, Card fromHand){
            slots.add(posIndex, fromHand);
        }
        public void removeFromSlots(int posIndex){
            slots.remove(posIndex);
        }
        public boolean hasOpenSlots(){
            return slots.size() != openSlots;
        }
        public int getOS(){
            if(slots.size() != openSlots) {
                return slots.size();
            }else {
                return openSlots;
            }
        }


    private final Uber u = new Uber();
    private final Attack a = new Attack();
    private final CoreDef cd = new CoreDef();
    private final Core c = new Core();
    private final Defense d = new Defense();


    public void addToSpace(String posName, Card here){


        switch(posName){
            case "uber" ->{
                if(!u.hasOpenSlots()){
                    System.err.println("All uber space are full");
                }
                u.slots.add(here);
            }
            case "atk" ->{
                if(!a.hasOpenSlots()){
                    System.err.println("All attack spaces are full");
                }
                a.getSlots().add(here);

            }
            case "coreDef" ->{
                if(!cd.hasOpenSlots()){
                    System.err.println("All core def spaces are full");
                }
                cd.getSlots().add(here);

            }
            case "core" ->{
                if(!c.hasOpenSlots()){
                    System.err.println("All core spaces are full");
                }
                c.getSlots().add(here);

            }
            case "def" ->{
                if(!d.hasOpenSlots()){
                    System.err.println("All defence spaces are full");
                }
                d.getSlots().add(here);

            }
        }

    }

    public void makeNullSpace(String posName, int num){
        switch(posName){
            case "uber" ->{
                if(!u.hasOpenSlots()){
                    System.err.println("Uber is Empty");
                }
                u.slots.remove(num);
                //u.slots.add(num, cc.pack.get(0)); cc = cardDatabase jic
            }
            case "atk" ->{
                if(!a.hasOpenSlots()){
                    System.err.println("Attack is Empty");
                }
                a.slots.remove(num);
                //a.slots.add(num, cc.pack.get(0));
            }
            case "coreDef" ->{
                if(!cd.hasOpenSlots()){
                    System.err.println("CoreDef is Empty");
                }
                cd.slots.remove(num);
                //cd.slots.add(num, cc.pack.get(0));
            }
            case "core" ->{
                if(!c.hasOpenSlots()){
                    System.err.println("Core is Empty");
                }
                c.slots.remove(num);
                //c.slots.add(num, cc.pack.get(0));

            }
            case "def" ->{
                if(!d.hasOpenSlots()){
                    System.err.println("Defence is Empty");
                }
                d.slots.remove(num);
                //d.slots.add(num, cc.pack.get(0));

            }
        }
    }

    public int defenceCount(){
        //get uber def if the space is null add zero
        int ub = 0,at = 0,cod = 0,de = 0;
        for(int i = 0; i < u.getOS(); i++){
            int tmp = u.getDef(i);
            ub = ub + tmp;
        }

        //get atk def
        for(int i = 0; i < a.getOS(); i++){
            int tmp = a.getDef(i);
            at = at + tmp;
        }

        // get core-def def
        for(int i = 0; i < cd.getOS(); i++){
            int tmp = cd.getDef(i);
            cod = cod + tmp;
        }

        //get def1 def bc why not make it even more confusing
        for(int i = 0; i < d.getOS(); i++){
            int tmp = d.getDef(i);
            de = de + tmp;
        }

        return ub + at + cod + c.getDef() + de;
    }
    public int attackCount(){
        //get uber atk if the space is null add zero
        int ub = 0,at = 0,cod = 0,de = 0;
        for(int i = 0; i < u.getOS(); i++){
            int tmp = u.getAtk(i);
            ub = ub + tmp;

        }

        //get atk atk
        for(int i = 0; i < a.getOS(); i++){
            int tmp = a.getAtk(i);
            at = at + tmp;

        }

        // get core-def atk
        for(int i = 0; i < cd.getOS(); i++){
            int tmp = cd.getAtk(i);
            cod = cod + tmp;
        }

        //get def atk
        for(int i = 0; i < d.getOS(); i++){
            int tmp = d.getAtk(i);
            de = de + tmp;
        }

        return ub + at + cod + c.getAtk() + de;
    }
package Game.Slots;
import Game.Card;
import Game.cardDatabase;

import java.util.LinkedList;

public class Uber implements Board.Position {
    private final int openSlots = 3;

    public LinkedList<Card> slots = new LinkedList<>();
    public cardDatabase cd = new cardDatabase();

    public int[] getStats(Card in){
        return in.getUber();
    }

    public int getAtk(int n){
        if(slots.get(n) == null){
            slots.add(n, cd.pack.get(0));
        }else {
            return slots.get(n).getUberAtk();
        }
        return 0;
    }

    public int getDef(int n){
        if(slots.get(n) == null){
            slots.add(n, cd.pack.get(0));
        }else {
            return slots.get(n).getUberDef();
        }
        return 0;
    }

    public boolean hasOpenSlots(){
        return slots.size() != openSlots;
    }
    public int getOS(){
        if(slots.size() != openSlots) {
            return slots.size();
        }else {
            return openSlots;
        }
    }
    @Override
    public LinkedList<Card> getSlots() {
        return slots;
    }

    public String toString(){
        return slots.toString();
    }

//List<Board> board = List.of(new Board(UBER),new Board(ATTACK), new Board(CoreDEFENCE), new Board(CORE),new Board(DEFENCE));


}

 Position p;
        for(int i = 0; i < p.getSlots().size(); i++ ) {
            if (p.getSlots().get(i) == null) {
                p.getSlots().add(cd.pack.get(0));
            }
        }
